name: Deploy to Fly.io

on:
  push:
    branches:
      - main
    paths:
      - 'CHANGELOG.md'
      - 'pyproject.toml'
      - 'src/**'
      - 'app.py'
      - 'data/**'
      - 'Dockerfile'
      - 'entrypoint.sh'
      # Exclude workflow files themselves to prevent circular builds
      - '!.github/workflows/**'
  workflow_dispatch:

env:
  FLY_APP: ncsh-dashboard
  S3_BUCKET: ncsh-app-data

jobs:
  verify_version:
    name: Verify version change
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_version.outputs.should_deploy }}
      new_version: ${{ steps.check_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Check version change
        id: check_version
        run: |
          # Get the latest version from CHANGELOG.md
          LATEST_VERSION=$(grep -m 1 '^## \[[0-9]\+\.[0-9]\+\.[0-9]\]' CHANGELOG.md | sed 's/^## \[\([0-9]\+\.[0-9]\+\.[0-9]\)\].*/\1/')
          echo "Latest version in CHANGELOG: $LATEST_VERSION"

          # Get the latest git tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          # Remove the 'v' prefix if present
          LATEST_TAG=${LATEST_TAG#v}
          echo "Latest git tag: $LATEST_TAG"

          # Compare versions strictly using dot notation for proper versioning comparison
          # Split versions into components
          IFS='.' read -ra VER_PARTS <<< "$LATEST_VERSION"
          IFS='.' read -ra TAG_PARTS <<< "$LATEST_TAG"

          # Convert to comparable integers (pad with zeros for versions with fewer components)
          VER_NUM=$((${VER_PARTS[0]:-0} * 10000 + ${VER_PARTS[1]:-0} * 100 + ${VER_PARTS[2]:-0}))
          TAG_NUM=$((${TAG_PARTS[0]:-0} * 10000 + ${TAG_PARTS[1]:-0} * 100 + ${TAG_PARTS[2]:-0}))

          echo "Converted version: $VER_NUM, Converted tag: $TAG_NUM"

          # Only deploy if the version in CHANGELOG is newer
          if [ $VER_NUM -gt $TAG_NUM ]; then
            echo "Version in CHANGELOG ($LATEST_VERSION) is newer than latest tag ($LATEST_TAG) - should deploy"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Version in CHANGELOG ($LATEST_VERSION) is not newer than latest tag ($LATEST_TAG) - should NOT deploy"
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy app
    needs: verify_version
    if: needs.verify_version.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: main
    permissions:
      id-token: write
      contents: write
      workflows: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::552336166511:role/github-actions-ncsh-dashboard
          aws-region: us-east-2
          audience: sts.amazonaws.com
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          AWS_REGION: us-east-2

      - name: Download data files
        run: |
          mkdir -p data
          aws s3 cp s3://${{ env.S3_BUCKET }}/v2/processed/parquet/data.parquet data/data.parquet
          aws s3 cp s3://${{ env.S3_BUCKET }}/v2/processed/sqlite/team_groups.db data/team_groups.db

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Check if LiteFS volume exists
        id: check_volume
        run: |
          if ! flyctl volumes list --app ${{ env.FLY_APP }} | grep -q "litefs"; then
            echo "volume_exists=false" >> $GITHUB_OUTPUT
          else
            echo "volume_exists=true" >> $GITHUB_OUTPUT
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create LiteFS volume if not exists
        if: steps.check_volume.outputs.volume_exists == 'false'
        run: flyctl volume create litefs -r iad -n 1 --app ${{ env.FLY_APP }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Post configure AWS credentials
        if: always()
        run: |
          rm -f ~/.aws/credentials
          rm -f ~/.aws/config

      - name: Configure Consul
        run: |
          # Get the primary region
          PRIMARY_REGION=$(flyctl status --app ${{ env.FLY_APP }} --json | jq -r '.PrimaryRegion')

          # Get the Consul URL
          CONSUL_URL=$(flyctl secrets list --app ${{ env.FLY_APP }} --json | jq -r '.[] | select(.Name == "FLY_CONSUL_URL") | .Digest')

          # If Consul URL is not set, set it
          if [ -z "$CONSUL_URL" ]; then
            flyctl secrets set FLY_CONSUL_URL="http://${PRIMARY_REGION}.${FLY_APP}.internal:8500" --app ${{ env.FLY_APP }}
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create and push git tag
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          # Check if tag already exists
          TAG_NAME="v${{ needs.verify_version.outputs.new_version }}"
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists - skipping tag creation"
          else
            echo "Creating new tag $TAG_NAME"
            git tag -a $TAG_NAME -m "Release $TAG_NAME"
            git push origin $TAG_NAME
          fi