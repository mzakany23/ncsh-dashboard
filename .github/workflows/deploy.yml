name: Deploy to Fly.io

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  FLY_APP: ncsh-dashboard
  S3_BUCKET: ncsh-app-data

jobs:
  verify_version:
    name: Verify version change
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check_version.outputs.should_deploy }}
      new_version: ${{ steps.check_version.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
      - name: Check version change
        id: check_version
        run: |
          # Get the latest version from CHANGELOG.md
          LATEST_VERSION=$(grep -m 1 '^## \[[0-9]\+\.[0-9]\+\.[0-9]\]' CHANGELOG.md | sed 's/^## \[\([0-9]\+\.[0-9]\+\.[0-9]\)\].*/\1/')
          echo "Latest version in CHANGELOG: $LATEST_VERSION"

          # Get the latest git tag
          git fetch --tags
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "Latest git tag: $LATEST_TAG"

          # Compare versions
          if [ "$LATEST_VERSION" != "$LATEST_TAG" ]; then
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            echo "new_version=$LATEST_VERSION" >> $GITHUB_OUTPUT
          fi

  deploy:
    name: Deploy app
    needs: verify_version
    if: needs.verify_version.outputs.should_deploy == 'true'
    runs-on: ubuntu-latest
    environment: main
    permissions:
      id-token: write
      contents: read
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::552336166511:role/github-actions-ncsh-dashboard
          aws-region: us-east-2
          audience: sts.amazonaws.com
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
          AWS_REGION: us-east-2

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Check if LiteFS volume exists
        id: check_volume
        run: |
          if ! flyctl volumes list --app ${{ env.FLY_APP }} | grep -q "litefs"; then
            echo "volume_exists=false" >> $GITHUB_OUTPUT
          else
            echo "volume_exists=true" >> $GITHUB_OUTPUT
          fi
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create LiteFS volume if not exists
        if: steps.check_volume.outputs.volume_exists == 'false'
        run: flyctl volume create litefs -r iad -n 1 --app ${{ env.FLY_APP }}
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Deploy to Fly.io
        run: flyctl deploy --remote-only
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Post configure AWS credentials
        if: always()
        run: |
          rm -f ~/.aws/credentials
          rm -f ~/.aws/config

      - name: Configure Consul
        run: flyctl consul attach
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

      - name: Create git tag
        if: success()
        run: |
          git tag ${{ needs.verify_version.outputs.new_version }}
          git push origin ${{ needs.verify_version.outputs.new_version }}